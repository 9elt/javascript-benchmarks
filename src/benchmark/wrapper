#!/bin/bash

escape_backticks() {
    echo -e "${@}" | sed "s/\`/\\\\\`/g"
}

sanitize() {
    echo "$( escape_backticks "${@}" )" | sed 's/\$/\\$/g'
}

# Generate the javascript benchmark code
#
# $1 => javascript snippet code
# $2 => available code
# $3 => javascript tests
#
# $4 => normal distribution samples
# $5 => snippet iterations
#
# $6 => benchmark version: simple, realistic, edge-case
# $7 => benchmark name
# $8 => file path
benchmark() {
    echo "
    const _outliers = (array) => {
        let arr = [...array]
        arr.sort((a, b) => a - b)

        let q1 = arr[Math.floor((arr.length / 4))]; 
        let q3 = arr[Math.ceil((arr.length * (3 / 4)))];
        let iqr = q3 - q1;

        let max = q3 + iqr * 1.5
        let min = q1 - iqr * 1.5

        return arr.filter(x => x <= max && x >= min)
    }

    const _snd = (arr) => {
        arr = _outliers(arr)

        const μ = arr.reduce((a, b) => a + b) / arr.length

        return {
            samples: arr.length,
            mean: μ,
            std: Math.sqrt(arr.map(x => Math.pow(x - μ, 2)).reduce((a, b) => a + b) / arr.length)
        }
    }

    $2

    const _results = [];

    const _tests = () => {

        $1

        $3

    }

    _tests()

    for (let _i = 0; _i < $4 ; _i++) {

        const _start = performance.now();

        for (let _iter = 0; _iter < $5; _iter++) {

            $1

        }

        const _end = performance.now();

        _results.push(_end - _start);
    }

    const _result = {
        version: '$6',
        name: '$7',
        file_path: '/$8',
        code: \`$( sanitize "$1" )\`,
        result: _snd(_results),
    }

    console.clear();
    console.log(JSON.stringify(_result));"
}
